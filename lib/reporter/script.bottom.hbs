<script>
'use strict';
{

  const codeMirrorInstances = [];
  const splitInstances = [];

  const init = CodeMirror => {
    initCodeMirror(CodeMirror);
    initTabs();
    initSplit();
  };

  const initCodeMirror = CodeMirror => {
    $('textarea[data-mode]').each((index, textarea) => {
      const codeMirror = CodeMirror.fromTextArea(textarea, {
        lineNumbers: true,
        mode: $(textarea).data('mode'),
        extraKeys: {"Ctrl-Space": "autocomplete"}
      });
      codeMirrorInstances.push(codeMirror);
    });
  };

  const initSplit = function() {
    //get the split containers
    const splitContainerEls = document.querySelectorAll('.split-container');
    for(let i = 0; i < splitContainerEls.length; i++) {
      //get all first-descendant splits
      const splitContainerEl = splitContainerEls[i];
      const splitEls = [];
      const splitSizes = [];
      for(let j = 0; j < splitContainerEl.children.length; j++) {
        if(!splitContainerEl.children[j].classList.contains('split')) {
          continue;
        }
        const splitEl = splitContainerEl.children[j];
        const splitSize = parseFloat(splitEl.dataset.splitSize);
        splitEls.push(splitEl);
        splitSizes.push(splitSize);
      }
      const split = Split(splitEls, {
          sizes: splitSizes,
          minSize: 50
      });
      splitInstances.push({
        split: split,
        sizes: splitSizes
      });
    }
  };

  const initTabs = () => {
    //manual manage tabs, as we don't want to work with element ids
    $('a[role=tab]').click(e => {
      e.preventDefault();
      const tabId = $(e.currentTarget).attr('aria-controls');
      const $tab = $('[data-tab-id="' + tabId + '"]');
      const $navTabs = $(e.currentTarget).parents('.nav-tabs');
      $navTabs.find('.active').removeClass('active');

      $navTabs.find('[aria-controls]').each((i, tabLink) => {
        const tabLinkTargetId = $(tabLink).attr('aria-controls');
        const $tabLinkTarget = $('[data-tab-id="' + tabLinkTargetId + '"]');
        $tabLinkTarget.removeClass('active');
      });

      // $(".nav-tabs .active, .tab-content .active").removeClass("active");
      $(e.target).closest('li').addClass('active');
      $tab.addClass("active");

      codeMirrorInstances.forEach(codeMirrorInstance => {
        codeMirrorInstance.refresh();
      });

      splitInstances.forEach(splitInstance => {
        splitInstance.split.setSizes(splitInstance.sizes);
      });
    });

    requestAnimationFrame(() => {
      $('a[role=tab]').first().click();
    });
  };

  require.config({
    packages: [
      {
        name: "codemirror",
        location: "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.9.0",
        main: "codemirror"
      }
    ],
    map: {
      'codemirror': {
        'codemirror/lib/codemirror': 'codemirror'
      }
    }
  });
  require(["codemirror", "codemirror/mode/htmlmixed/htmlmixed", "codemirror/mode/css/css",
         "codemirror/addon/hint/show-hint", "codemirror/addon/hint/html-hint",
         "codemirror/addon/mode/loadmode", "codemirror/addon/search/search", "codemirror/addon/search/searchcursor", "codemirror/addon/dialog/dialog"], function(CodeMirror) {
          init(CodeMirror);
  });
};
</script>
